{"version":3,"sources":["../../../../../../src/javascripts/test/unit/Crud/list/maDatagridInfinitePaginationSpec.js"],"names":["describe","directive","require","$compile","scope","$window","$document","element","bodyHeightMock","pageSize","directiveUsage","initializeBodyHeightMock","angular","querySelector","length","body","append","simulateLoadOnBodyHeight","page","css","simulateScrollToPage","scrollY","triggerHandler","initializeScope","nextPage","jasmine","createSpy","and","callFake","totalItems","itemsPerPage","initializeElement","$digest","module","beforeEach","mock","inject","_$compile_","_$rootScope_","_$window_","_$document_","$new","innerHeight","it","expect","toHaveBeenCalled","calls","count","toEqual","argsFor","not","afterEach","$destroy"],"mappings":"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","file":"maDatagridInfinitePaginationSpec.js","sourcesContent":["/*global angular,inject,describe,it,jasmine,expect,beforeEach,module*/\ndescribe('directive: ma-datagrid-infinite-pagination', function () {\n    var directive = require('../../../../ng-admin/Crud/list/maDatagridInfinitePagination'),\n        $compile,\n        scope,\n        $window,\n        $document,\n        element,\n        bodyHeightMock,\n        pageSize = 2000,\n        directiveUsage = '<ma-datagrid-infinite-pagination next-page=\"nextPage\" total-items=\"{{ totalItems }}\" per-page=\"{{ itemsPerPage }}\"></ma-datagrid-infinite-pagination>';\n\n    function initializeBodyHeightMock(){\n        if(!angular.element($document[0].querySelector('#mock')).length){\n            bodyHeightMock = angular.element(`<div id=\"mock\" style=\"height:${pageSize}px\"></div>`)[0];\n            angular.element($document[0].body).append(bodyHeightMock);\n        }else{\n            simulateLoadOnBodyHeight(1);\n        }\n    }\n\n    function simulateLoadOnBodyHeight(page){\n        angular.element($document[0].querySelector('#mock')).css('height',(pageSize*page) + 'px');\n    }\n\n    function simulateScrollToPage(page){\n        $window.scrollY = pageSize * (page-1) + 1500;\n        angular.element($window).triggerHandler('scroll');\n    }\n\n    function initializeScope(){\n        scope.nextPage = jasmine.createSpy('nextPage').and.callFake(function(page) {\n            simulateLoadOnBodyHeight(page);\n        });\n        scope.totalItems = 100;\n        scope.itemsPerPage = 10;\n    }\n\n    function initializeElement(){\n        element = $compile(directiveUsage)(scope);\n        scope.$digest();\n    }\n\n    angular.module('testapp_DatagridInfinitePagination', [])\n        .directive('maDatagridInfinitePagination', directive);\n\n    beforeEach(angular.mock.module('testapp_DatagridInfinitePagination'));\n\n    beforeEach(inject(function (_$compile_, _$rootScope_, _$window_, _$document_) {\n        $compile = _$compile_;\n        scope = _$rootScope_.$new();\n        $window = _$window_;\n        $window.innerHeight = 759;\n        $document = _$document_;\n        initializeBodyHeightMock();\n        initializeScope();\n        initializeElement();\n    }));\n\n    it('should trigger next-page when scrolling', function () {\n        simulateScrollToPage(2);\n        expect(scope.nextPage).toHaveBeenCalled();\n    });\n\n    it('should trigger next-page twice when scrolling twice', function(){\n        simulateScrollToPage(2);\n        simulateScrollToPage(3);\n        expect(scope.nextPage.calls.count()).toEqual(2);\n    });\n\n    it('should trigger next-page with right page number', function(){\n        simulateScrollToPage(2);\n        simulateScrollToPage(3);\n        expect(scope.nextPage.calls.argsFor(0)).toEqual([2]);\n        expect(scope.nextPage.calls.argsFor(1)).toEqual([3]);\n    });\n\n    it('should not trigger next-page if not scrolling', function () {\n        expect(scope.nextPage).not.toHaveBeenCalled();\n    });\n\n    it('should not trigger next-page when scrolling up', function(){\n        simulateScrollToPage(2);\n        simulateScrollToPage(3);\n        simulateScrollToPage(2);\n        expect(scope.nextPage.calls.count()).toEqual(2);\n    });\n\n    afterEach(function(){\n        scope.$destroy();\n    });\n});\n"]}